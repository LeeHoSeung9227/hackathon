name: Deploy Docker to EC2

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: eu-north-1
  ECR_REPO: my-api
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ec2-user
  EC2_APP_DIR: /opt/app
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '8.5'

      - name: Build JAR
        run: gradle clean bootJar

      - name: Prepare app.jar
        run: |
          JAR=$(ls build/libs/*.jar | head -n1)
          cp "$JAR" app.jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image
        run: |
          docker build -t "$ECR_REPO:latest" .
          docker tag "$ECR_REPO:latest" "$ECR_REGISTRY/$ECR_REPO:latest"
          docker tag "$ECR_REPO:latest" "$ECR_REGISTRY/$ECR_REPO:${{ github.sha }}"
          docker push "$ECR_REGISTRY/$ECR_REPO:latest"
          docker push "$ECR_REGISTRY/$ECR_REPO:${{ github.sha }}"

  setup_ec2:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup EC2 Environment
        run: |
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "setup EC2 environment" \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --parameters 'commands=["#!/bin/bash
          set -e
          
          echo \"=== EC2 환경 설정 시작 ===\"
          
          # 1. Docker 설치
          echo \"Docker 설치 중...\"
          sudo yum update -y
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user
          
          # 2. Docker Compose 설치
          echo \"Docker Compose 설치 중...\"
          sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
          # 3. 필요한 디렉토리 생성
          echo \"디렉토리 생성 중...\"
          sudo mkdir -p /opt/app
          sudo chown ec2-user:ec2-user /opt/app
          
          # 4. docker-compose.yml 생성
          echo \"docker-compose.yml 생성 중...\"
          cat > /opt/app/docker-compose.yml << \"EOF\"
          version: \"3.8\"
          services:
            app:
              image: ${ECR_REGISTRY}/my-api:latest
              container_name: hackathon-backend
              ports:
                - \"8080:8080\"
              environment:
                - SPRING_PROFILES_ACTIVE=prod
              restart: unless-stopped
              healthcheck:
                test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/actuator/health\"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          
          # 5. .env 파일 생성
          echo \".env 파일 생성 중...\"
          cat > /opt/app/.env << \"EOF\"
          ECR_REGISTRY=345594599315.dkr.ecr.eu-north-1.amazonaws.com
          EOF
          
          # 6. curl 설치 (health check용)
          echo \"curl 설치 중...\"
          sudo yum install -y curl
          
          # 7. 권한 설정
          echo \"권한 설정 중...\"
          sudo chown -R ec2-user:ec2-user /opt/app
          chmod 644 /opt/app/docker-compose.yml
          chmod 644 /opt/app/.env
          
          echo \"=== 환경 설정 완료 ===\"
          echo \"Docker 버전: $(docker --version)\"
          echo \"Docker Compose 버전: $(docker compose version)\"
          echo \"파일 확인:\"
          ls -la /opt/app/
          echo \"\"
          echo \"docker-compose.yml 내용:\"
          cat /opt/app/docker-compose.yml
          echo \"\"
          echo \".env 내용:\"
          cat /opt/app/.env"]' \
            --query "Command.CommandId" --output text)
          
          echo "Setup command ID: $CMD_ID"
          
          # 명령어 완료 대기
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "${{ env.EC2_INSTANCE_ID }}"
          
          # 결과 확인
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}'

  deploy:
    needs: setup_ec2
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        run: |
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "deploy via github actions" \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --parameters 'commands=["set -e
          echo \"Starting deployment on EC2 via SSM...\"
          [ -f \"${{ env.EC2_APP_DIR }}/docker-compose.yml\" ] || (echo \"missing compose file\"; exit 1)
          [ -f \"${{ env.EC2_APP_DIR }}/.env\" ]              || (echo \"missing env file\";     exit 1)
          
          aws ecr get-login-password --region \"${{ env.AWS_REGION }}\" | docker login --username AWS --password-stdin \"${{ env.ECR_REGISTRY }}\"
          
          docker compose -f \"${{ env.EC2_APP_DIR }}/docker-compose.yml\" pull
          docker compose -f \"${{ env.EC2_APP_DIR }}/docker-compose.yml\" up -d
          docker ps
          curl -s http://127.0.0.1:8080/actuator/health || true
          echo \"Deployment completed successfully!\""]' \
            --query "Command.CommandId" --output text)
          
          echo "Deploy command ID: $CMD_ID"
          
          # 명령어 완료 대기
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "${{ env.EC2_INSTANCE_ID }}"
          
          # 결과 확인
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}'
