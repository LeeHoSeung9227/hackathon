name: CI/CD Pipeline - Docker Hub

on:
  push:
    branches: ["main"]   # main 브랜치에 push될 때만 실행

concurrency:
  group: deploy
  cancel-in-progress: true   # 최신 코드만 배포

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설치
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Maven 빌드 (JAR 생성)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. JAR 파일 이름 확인 / 필요시 변경
      - name: Ensure app.jar exists
        run: |
          echo "Checking if app.jar exists..."
          if [ ! -f target/app.jar ]; then
            echo "Renaming Maven output to app.jar"
            mv target/*.jar target/app.jar
          else
            echo "app.jar already exists, skipping rename"
          fi

      # 5. Docker Hub 로그인
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 6. Docker 이미지 빌드 & 푸시
      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/hackathon-server:latest
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      # 7. EC2 서버에 배포
      - name: Deploy to EC2 Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}        # EC2 IP
          username: ${{ secrets.SERVER_USER }}    # ec2-user
          key: ${{ secrets.SERVER_KEY }}          # PEM key 내용
          script: |
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/hackathon-server:latest
            echo "=== Pulling latest image ==="
            docker pull $IMAGE_NAME
            echo "=== Stopping existing container if exists ==="
            docker stop hackathon-server || true
            docker rm hackathon-server || true
            echo "=== Running new container ==="
            docker run -d --name hackathon-server -p 8080:8080 $IMAGE_NAME
