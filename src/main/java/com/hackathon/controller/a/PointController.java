package com.hackathon.controller.a;

import com.hackathon.dto.a.PointHistoryDto;
import com.hackathon.dto.a.UserDto;
import com.hackathon.entity.a.PointHistory;
import com.hackathon.entity.a.Image;
import com.hackathon.repository.a.PointHistoryRepository;
import com.hackathon.repository.a.ImageRepository;
import com.hackathon.service.a.PointHistoryService;
import com.hackathon.service.a.UserService;
import com.hackathon.service.b.ProductService;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.*;
import java.util.stream.Collectors;
import java.time.LocalDateTime;
import org.springframework.http.MediaType;

@RestController
@RequestMapping("/api/points")
@RequiredArgsConstructor
public class PointController {
    
    private static final Logger log = LoggerFactory.getLogger(PointController.class);
    
    private final PointHistoryService pointHistoryService;
    private final UserService userService;
    private final ProductService productService;
    private final PointHistoryRepository pointHistoryRepository;
    private final ImageRepository imageRepository;
    
    // ===== ?¨Ïù∏??Ï∂îÍ?/Ï∞®Í∞ê =====
    
    /**
     * ?¨Ïù∏??Ï∂îÍ?/Ï∞®Í∞ê
     */
    @PostMapping("/add")
    public ResponseEntity<Map<String, Object>> addPoints(@RequestBody Map<String, Object> request) {
        try {
            Long userId = Long.valueOf(request.get("userId").toString());
            Integer points = Integer.valueOf(request.get("points").toString());
            String type = (String) request.get("type");
            String description = (String) request.get("description");
            
            // ?¨Ïù∏???àÏä§?†Î¶¨ ?Ä??            PointHistoryDto pointHistory = pointHistoryService.createPointHistory(userId, type, points, description);
            
            // ?¨Ïö©??Ï¥??¨Ïù∏???ÖÎç∞?¥Ìä∏
            userService.updateUserPoints(userId, points);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", points > 0 ? "?¨Ïù∏?∏Í? Ï∂îÍ??òÏóà?µÎãà??" : "?¨Ïù∏?∏Í? Ï∞®Í∞ê?òÏóà?µÎãà??",
                "data", Map.of(
                    "pointHistory", pointHistory,
                    "pointsChanged", points,
                    "newTotalPoints", userService.getUserById(userId).getPointsTotal()
                )
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", e.getMessage()));
        }
    }
    
    /**
     * ?¨Ïö©???¨Ïù∏???îÏïΩ ?ïÎ≥¥ (Ï¥??¨Ïù∏?? ?ÑÏû¨ ?¨Ïù∏?? ?¨Ïö© ?¨Ïù∏?? ?®Í≥º?Ä Ï¥??¨Ïù∏??
     */
    @GetMapping("/user/{userId}/summary")
    public ResponseEntity<Map<String, Object>> getUserPointSummary(@PathVariable Long userId) {
        try {
            // ?¨Ïö©???ïÎ≥¥ Ï°∞Ìöå
            var user = userService.getUserById(userId);
            
            // ?¨Ïù∏???àÏä§?†Î¶¨ Ï°∞Ìöå
            List<PointHistoryDto> pointHistory = pointHistoryService.getPointHistoryByUserId(userId);
            
            // ?¨Ïù∏??Í≥ÑÏÇ∞
            int totalEarned = pointHistory.stream()
                .filter(ph -> ph.getPoints() > 0)
                .mapToInt(PointHistoryDto::getPoints)
                .sum();
            
            int totalSpent = Math.abs(pointHistory.stream()
                .filter(ph -> ph.getPoints() < 0)
                .mapToInt(PointHistoryDto::getPoints)
                .sum());
            
            int currentPoints = user.getPointsTotal();
            
            // ?®Í≥º?Ä Ï¥??¨Ïù∏??(Í∞ôÏ? ?®Í≥º?Ä ?¨Ïö©?êÎì§???¨Ïù∏???©Í≥Ñ)
            int collegeTotalPoints = userService.getCollegeTotalPoints(user.getCollege());
            
            // ?àÎ≤® ?ïÎ≥¥
            String levelName = getLevelName(user.getLevel());
            
            Map<String, Object> summary = Map.of(
                "user", Map.of(
                    "id", user.getId(),
                    "username", user.getUsername(),
                    "name", user.getName(),
                    "college", user.getCollege(),
                    "campus", user.getCampus(),
                    "level", user.getLevel(),
                    "levelName", levelName
                ),
                "points", Map.of(
                    "totalEarned", totalEarned,      // Ï¥??çÎìù ?¨Ïù∏??                    "totalSpent", totalSpent,        // Ï¥??¨Ïö© ?¨Ïù∏??                    "currentPoints", currentPoints,  // ?ÑÏû¨ Î≥¥Ïú† ?¨Ïù∏??                    "collegeTotalPoints", collegeTotalPoints  // ?®Í≥º?Ä Ï¥??¨Ïù∏??                ),
                "recentHistory", pointHistory.stream()
                    .limit(5)
                    .collect(Collectors.toList())
            );
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", summary
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", e.getMessage()));
        }
    }
    
    // ===== ?¨Ïù∏???¥Ïó≠ =====
    
    /**
     * ?¨Ïö©???¨Ïù∏???¥Ïó≠ Ï°∞Ìöå
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<Map<String, Object>> getUserPointHistory(@PathVariable Long userId) {
        try {
            List<PointHistoryDto> pointHistory = pointHistoryService.getPointHistoryByUserId(userId);
            
            List<PointHistoryDto> pointDtos = pointHistory.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", pointDtos
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", e.getMessage()));
        }
    }
    
    /**
     * ?¥Î?ÏßÄÎ≥??¨Ïù∏???¥Ïó≠ Ï°∞Ìöå
     */
    @GetMapping("/image/{imagesId}")
    public ResponseEntity<Map<String, Object>> getImagePointHistory(@PathVariable Long imagesId) {
        try {
            List<PointHistoryDto> pointHistory = pointHistoryService.getPointHistoryByImageId(imagesId);
            
            // Ï¥??¨Ïù∏??Í≥ÑÏÇ∞
            int totalPoints = pointHistory.stream()
                .mapToInt(PointHistoryDto::getPoints)
                .sum();
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", Map.of(
                    "imageId", imagesId,
                    "totalPoints", totalPoints,
                    "history", pointHistory
                )
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", e.getMessage()));
        }
    }
    
    /**
     * Î≥ÄÍ≤??Ä?ÖÎ≥Ñ ?¨Ïù∏???¥Ïó≠ Ï°∞Ìöå (changeType??'all'?¥Î©¥ Î™®Îì† ?Ä??Î∞òÌôò)
     */
    @GetMapping("/user/{userId}/type/{changeType}")
    public ResponseEntity<?> getPointHistoryByType(
            @PathVariable Long userId,
            @PathVariable String changeType) {
        
        try {
            List<Map<String, Object>> result = new ArrayList<>();
            
            if ("all".equals(changeType)) {
                // Î™®Îì† ?Ä?ÖÏùò ?¨Ïù∏???àÏä§?†Î¶¨ Ï°∞Ìöå
                List<PointHistory> histories = pointHistoryRepository.findByUserIdOrderByCreatedAtDesc(userId);
                
                for (PointHistory history : histories) {
                    Map<String, Object> historyMap = new HashMap<>();
                    historyMap.put("id", history.getId());
                    historyMap.put("userId", history.getUserId());
                    historyMap.put("type", history.getType());
                    historyMap.put("points", history.getPoints());
                    historyMap.put("description", history.getDescription());
                    historyMap.put("imageId", history.getImageId());
                    historyMap.put("createdAt", history.getCreatedAt());
                    historyMap.put("updatedAt", history.getUpdatedAt());
                    
                    // ?¥Î?ÏßÄ ?ïÎ≥¥Í∞Ä ?àÎäî Í≤ΩÏö∞ Ï∂îÍ?
                    if (history.getImageId() != null) {
                        try {
                            var image = imageRepository.findById(history.getImageId());
                            if (image.isPresent()) {
                                Image img = image.get();
                                Map<String, Object> imageInfo = new HashMap<>();
                                imageInfo.put("id", img.getId());
                                imageInfo.put("filename", img.getFileName());
                                imageInfo.put("contentType", img.getContentType());
                                imageInfo.put("size", img.getFileSize());
                                imageInfo.put("url", "/api/points/images/file/" + img.getId());
                                historyMap.put("image", imageInfo);
                            }
                        } catch (Exception e) {
                            log.warn("?¥Î?ÏßÄ Ï°∞Ìöå ?§Ìå®: {}", e.getMessage());
                        }
                    }
                    
                    result.add(historyMap);
                }
            } else {
                // ?πÏ†ï ?Ä?ÖÏùò ?¨Ïù∏???àÏä§?†Î¶¨ Ï°∞Ìöå
                List<PointHistory> histories = pointHistoryRepository.findByUserIdAndTypeOrderByCreatedAtDesc(userId, changeType);
                
                for (PointHistory history : histories) {
                    Map<String, Object> historyMap = new HashMap<>();
                    historyMap.put("id", history.getId());
                    historyMap.put("userId", history.getUserId());
                    historyMap.put("type", history.getType());
                    historyMap.put("points", history.getPoints());
                    historyMap.put("description", history.getDescription());
                    historyMap.put("imageId", history.getImageId());
                    historyMap.put("createdAt", history.getCreatedAt());
                    historyMap.put("updatedAt", history.getUpdatedAt());
                    
                    // ?¥Î?ÏßÄ ?ïÎ≥¥Í∞Ä ?àÎäî Í≤ΩÏö∞ Ï∂îÍ?
                    if (history.getImageId() != null) {
                        try {
                            var image = imageRepository.findById(history.getImageId());
                            if (image.isPresent()) {
                                Image img = image.get();
                                Map<String, Object> imageInfo = new HashMap<>();
                                imageInfo.put("id", img.getId());
                                imageInfo.put("filename", img.getFileName());
                                imageInfo.put("contentType", img.getContentType());
                                imageInfo.put("size", img.getFileSize());
                                imageInfo.put("url", "/api/points/images/file/" + img.getId());
                                historyMap.put("image", imageInfo);
                            }
                        } catch (Exception e) {
                            log.warn("?¥Î?ÏßÄ Ï°∞Ìöå ?§Ìå®: {}", e.getMessage());
                        }
                    }
                    
                    result.add(historyMap);
                }
            }
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            log.error("?¨Ïù∏???àÏä§?†Î¶¨ Ï°∞Ìöå ?§Ìå®: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("?¨Ïù∏???àÏä§?†Î¶¨ Ï°∞Ìöå???§Ìå®?àÏäµ?àÎã§: " + e.getMessage());
        }
    }

    /**
     * ?¨Ïö©???µÌï© ?Ä?úÎ≥¥???ïÎ≥¥ Ï°∞Ìöå (Ï¥ùÌè¨?∏Ìä∏, ?¨ÏßÑ, ?ÅÎ¶Ω?¥Ïö©, ?úÍ∞Ñ ??
     */
    @GetMapping("/user/{userId}/dashboard/comprehensive")
    public ResponseEntity<Map<String, Object>> getUserComprehensiveDashboard(@PathVariable Long userId) {
        try {
            // ?¨Ïö©???ïÎ≥¥ Ï°∞Ìöå
            var user = userService.getUserById(userId);
            
            // ?¨Ïù∏???àÏä§?†Î¶¨ Ï°∞Ìöå
            List<PointHistoryDto> pointHistory = pointHistoryService.getPointHistoryByUserId(userId);
            
            // ?¨Ïù∏??Í≥ÑÏÇ∞
            int totalEarned = pointHistory.stream()
                .filter(ph -> ph.getPoints() > 0)
                .mapToInt(PointHistoryDto::getPoints)
                .sum();
            
            int totalSpent = Math.abs(pointHistory.stream()
                .filter(ph -> ph.getPoints() < 0)
                .mapToInt(PointHistoryDto::getPoints)
                .sum());
            
            int currentPoints = user.getPointsTotal();
            
            // ?ÅÏÑ∏ ?¨Ïù∏???ÅÎ¶Ω ?ïÎ≥¥ (?¥Î?ÏßÄ, Î±ÉÏ?, ?òÎèô ?? - Î™®Îì† ?Ä???úÏãú
            List<Map<String, Object>> detailedHistory = pointHistory.stream()
                .map(ph -> {
                    Map<String, Object> detail = Map.of(
                        "id", ph.getId(),
                        "points", ph.getPoints(),
                        "type", ph.getType(),
                        "description", ph.getDescription(),
                        "imageId", ph.getImageId(),
                        "createdAt", ph.getCreatedAt(),
                        "source", getSourceType(ph.getType(), ph.getImageId())
                    );
                    return detail;
                })
                .collect(Collectors.toList());
            
            // ?µÍ≥Ñ ?ïÎ≥¥ (?¨ÏßÑ Î∂ÑÏÑù ?üÏàò ?úÍ±∞)
            Map<String, Object> statistics = Map.of(
                "totalEarned", totalEarned,      // Ï¥??çÎìù ?¨Ïù∏??                "totalSpent", totalSpent,        // Ï¥??¨Ïö© ?¨Ïù∏??                "currentPoints", currentPoints,  // ?ÑÏû¨ Î≥¥Ïú† ?¨Ïù∏??                "badgeCount", detailedHistory.stream()
                    .filter(h -> "BADGE_EARNED".equals(h.get("type")))
                    .count(),                    // Î±ÉÏ? ?çÎìù ?üÏàò
                "manualCount", detailedHistory.stream()
                    .filter(h -> "MANUAL_ADD".equals(h.get("type")))
                    .count()                     // ?òÎèô Ï∂îÍ? ?üÏàò
            );
            
            Map<String, Object> dashboard = Map.of(
                "user", Map.of(
                    "id", user.getId(),
                    "username", user.getUsername(),
                    "name", user.getName(),
                    "college", user.getCollege(),
                    "campus", user.getCampus(),
                    "level", user.getLevel(),
                    "levelName", getLevelName(user.getLevel())
                ),
                "points", statistics,
                "detailedHistory", detailedHistory,
                "recentActivity", detailedHistory.stream()
                    .limit(10)
                    .collect(Collectors.toList())
            );
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", dashboard
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", e.getMessage()));
        }
    }
    
    /**
     * ?†Ïßú Î≤îÏúÑÎ≥??¨Ïù∏???¥Ïó≠ Ï°∞Ìöå
     */
    @GetMapping("/user/{userId}/range")
    public ResponseEntity<Map<String, Object>> getUserPointHistoryByDateRange(
            @PathVariable Long userId,
            @RequestParam String startDate,
            @RequestParam String endDate) {
        try {
            // ?†Ïßú ?åÏã± (Í∞ÑÎã®??Íµ¨ÌòÑ)
            LocalDateTime start = LocalDateTime.parse(startDate + "T00:00:00");
            LocalDateTime end = LocalDateTime.parse(endDate + "T23:59:59");
            
            // ?¨Ïù∏???àÏä§?†Î¶¨ Ï°∞Ìöå (Í∏∞Í∞ÑÎ≥?
            List<PointHistoryDto> pointHistory = pointHistoryService.getPointHistoryByUserId(userId).stream()
                .filter(ph -> ph.getCreatedAt().isAfter(start) && ph.getCreatedAt().isBefore(end))
                .collect(Collectors.toList());
            
            // Ï¥??¨Ïù∏??Í≥ÑÏÇ∞
            int totalPoints = pointHistory.stream()
                .mapToInt(PointHistoryDto::getPoints)
                .sum();
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", Map.of(
                    "userId", userId,
                    "startDate", startDate,
                    "endDate", endDate,
                    "totalPoints", totalPoints,  // Ï¥??¨Ïù∏??Ï∂îÍ?
                    "history", pointHistory      // ?ÅÏÑ∏ ?¥Ïó≠
                )
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", "?†Ïßú ?ïÏãù???¨Î∞îÎ•¥Ï? ?äÏäµ?àÎã§. (YYYY-MM-DD ?ïÏãù)" + e.getMessage()));
        }
    }

    // ===== DTO Î≥Ä??Î©îÏÑú??=====
    
    private PointHistoryDto convertToDto(PointHistoryDto dto) {
        return dto; // ?¥Î? DTO?¥Î?Î°?Í∑∏Î?Î°?Î∞òÌôò
    }

    private String getLevelName(int level) {
        switch (level) {
            case 1:
                return "?®Ïïó";
            case 2:
                return "?ëÏ? ?àÏãπ";
            case 3:
                return "?àÏãπ";
            case 4:
                return "???àÏãπ";
            case 5:
                return "?òÎ¨¥";
            default:
                return "?®Ïïó";
        }
    }
    
    private String getSourceType(String type, Long imageId) {
        if (imageId != null) {
            return "?¨ÏßÑ";
        } else if ("BADGE_EARNED".equals(type)) {
            return "Î±ÉÏ?";
        } else if ("MANUAL_ADD".equals(type)) {
            return "?òÎèô";
        } else {
            return "Í∏∞Ì?";
        }
    }
    
    // ===== ?ÅÌíà Ï°∞Ìöå API (?åÏä§?∏Ïö©) =====
    
    /**
     * Î™®Îì† ?ÅÌíà Ï°∞Ìöå
     */
    @GetMapping("/products")
    public ResponseEntity<Map<String, Object>> getAllProducts() {
        try {
            // ?ÑÏãúÎ°??òÎìúÏΩîÎî©???ÅÌíà ?∞Ïù¥??Î∞òÌôò (?åÏä§?∏Ïö©)
            List<Map<String, Object>> products = List.of(
                Map.of(
                    "id", 1L,
                    "name", "?êÏΩîÎ∞?,
                    "description", "ÏπúÌôòÍ≤??¨Ìôú???êÏΩîÎ∞?,
                    "price", 15000.00,
                    "pointsRequired", 100,
                    "stockQuantity", 50,
                    "category", "LIFESTYLE",
                    "imageUrl", "/images/products/ecobag.jpg"
                ),
                Map.of(
                    "id", 2L,
                    "name", "?ÄÎ∏îÎü¨",
                    "description", "?§ÌÖå?∏Î¶¨???ÄÎ∏îÎü¨",
                    "price", 25000.00,
                    "pointsRequired", 200,
                    "stockQuantity", 30,
                    "category", "LIFESTYLE",
                    "imageUrl", "/images/products/tumbler.jpg"
                ),
                Map.of(
                    "id", 3L,
                    "name", "?¨Ìôú???∏Ìä∏",
                    "description", "?¨Ìôú??Ï¢ÖÏù¥Î°?ÎßåÎì† ?∏Ìä∏",
                    "price", 8000.00,
                    "pointsRequired", 50,
                    "stockQuantity", 100,
                    "category", "STATIONERY",
                    "imageUrl", "/images/products/notebook.jpg"
                ),
                Map.of(
                    "id", 4L,
                    "name", "ÏπúÌôòÍ≤???,
                    "description", "?¨Ìôú???åÎùº?§Ìã± ??,
                    "price", 5000.00,
                    "pointsRequired", 30,
                    "stockQuantity", 200,
                    "category", "STATIONERY",
                    "imageUrl", "/images/products/pen.jpg"
                ),
                Map.of(
                    "id", 5L,
                    "name", "?êÏΩî ?îÎ∂Ñ",
                    "description", "?¨Ìôú???åÏû¨ ?îÎ∂Ñ",
                    "price", 35000.00,
                    "pointsRequired", 300,
                    "stockQuantity", 20,
                    "category", "LIFESTYLE",
                    "imageUrl", "/images/products/plantpot.jpg"
                )
            );
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", products
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", e.getMessage()));
        }
    }
    
    /**
     * ?ÅÌíà IDÎ°?Ï°∞Ìöå
     */
    @GetMapping("/products/{id}")
    public ResponseEntity<Map<String, Object>> getProductById(@PathVariable Long id) {
        try {
            // ?ÑÏãúÎ°??òÎìúÏΩîÎî©???ÅÌíà ?∞Ïù¥?∞Ïóê??IDÎ°?Ï∞æÍ∏∞ (?åÏä§?∏Ïö©)
            Map<String, Object> product = null;
            
            if (id == 1L) {
                product = Map.of(
                    "id", 1L,
                    "name", "?êÏΩîÎ∞?,
                    "description", "ÏπúÌôòÍ≤??¨Ìôú???êÏΩîÎ∞?,
                    "price", 15000.00,
                    "pointsRequired", 100,
                    "stockQuantity", 50,
                    "category", "LIFESTYLE",
                    "imageUrl", "/images/products/ecobag.jpg"
                );
            } else if (id == 2L) {
                product = Map.of(
                    "id", 2L,
                    "name", "?ÄÎ∏îÎü¨",
                    "description", "?§ÌÖå?∏Î¶¨???ÄÎ∏îÎü¨",
                    "price", 25000.00,
                    "pointsRequired", 200,
                    "stockQuantity", 30,
                    "category", "LIFESTYLE",
                    "imageUrl", "/images/products/tumbler.jpg"
                );
            } else if (id == 3L) {
                product = Map.of(
                    "id", 3L,
                    "name", "?¨Ìôú???∏Ìä∏",
                    "description", "?¨Ìôú??Ï¢ÖÏù¥Î°?ÎßåÎì† ?∏Ìä∏",
                    "price", 8000.00,
                    "pointsRequired", 50,
                    "stockQuantity", 100,
                    "category", "STATIONERY",
                    "imageUrl", "/images/products/notebook.jpg"
                );
            } else if (id == 4L) {
                product = Map.of(
                    "id", 4L,
                    "name", "ÏπúÌôòÍ≤???,
                    "description", "?¨Ìôú???åÎùº?§Ìã± ??,
                    "price", 5000.00,
                    "pointsRequired", 30,
                    "stockQuantity", 200,
                    "category", "STATIONERY",
                    "imageUrl", "/images/products/pen.jpg"
                );
            } else if (id == 5L) {
                product = Map.of(
                    "id", 5L,
                    "name", "?êÏΩî ?îÎ∂Ñ",
                    "description", "?¨Ìôú???åÏû¨ ?îÎ∂Ñ",
                    "price", 35000.00,
                    "pointsRequired", 300,
                    "stockQuantity", 20,
                    "category", "LIFESTYLE",
                    "imageUrl", "/images/products/plantpot.jpg"
                );
            }
            
            if (product != null) {
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "data", product
                ));
            } else {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "?ÅÌíà??Ï∞æÏùÑ ???ÜÏäµ?àÎã§."
                ));
            }
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("error", e.getMessage()));
        }
    }
    
    /**
     * ?ÅÌíà Íµ¨Îß§ (Ï£ºÎ¨∏ ?ùÏÑ±)
     */
    @PostMapping("/orders")
    public ResponseEntity<Map<String, Object>> createOrder(@RequestBody Map<String, Object> request) {
        try {
            Long userId = Long.valueOf(request.get("userId").toString());
            Long productId = Long.valueOf(request.get("productId").toString());
            Integer quantity = Integer.valueOf(request.get("quantity").toString());
            
            // ?ÅÌíà ?ïÎ≥¥ Ï°∞Ìöå
            List<Map<String, Object>> products = List.of(
                Map.of("id", 1L, "name", "?êÏΩîÎ∞?, "description", "ÏπúÌôòÍ≤??¨Ìôú???êÏΩîÎ∞?, "pointsRequired", 100, "price", 15000.0, "category", "LIFESTYLE", "stockQuantity", 50, "imageUrl", "/images/products/ecobag.jpg"),
                Map.of("id", 2L, "name", "?ÄÎ∏îÎü¨", "description", "?§ÌÖå?∏Î¶¨???ÄÎ∏îÎü¨", "pointsRequired", 200, "price", 25000.0, "category", "LIFESTYLE", "stockQuantity", 30, "imageUrl", "/images/products/tumbler.jpg"),
                Map.of("id", 3L, "name", "?¨Ìôú???∏Ìä∏", "description", "?¨Ìôú??Ï¢ÖÏù¥Î°?ÎßåÎì† ?∏Ìä∏", "pointsRequired", 50, "price", 8000.0, "category", "STATIONERY", "stockQuantity", 100, "imageUrl", "/images/products/notebook.jpg"),
                Map.of("id", 4L, "name", "ÏπúÌôòÍ≤???, "description", "?¨Ìôú???åÎùº?§Ìã± ??, "pointsRequired", 30, "price", 5000.0, "category", "STATIONERY", "stockQuantity", 200, "imageUrl", "/images/products/pen.jpg"),
                Map.of("id", 5L, "name", "?êÏΩî ?îÎ∂Ñ", "description", "?¨Ìôú???åÏû¨ ?îÎ∂Ñ", "pointsRequired", 300, "price", 35000.0, "category", "LIFESTYLE", "stockQuantity", 20, "imageUrl", "/images/products/plantpot.jpg")
            );
            
            Map<String, Object> product = products.stream()
                .filter(p -> p.get("id").equals(productId))
                .findFirst()
                .orElse(null);
            
            if (product == null) {
                return ResponseEntity.badRequest()
                    .body(Map.of("success", false, "message", "?ÅÌíà??Ï∞æÏùÑ ???ÜÏäµ?àÎã§."));
            }
            
            int pointsRequired = (Integer) product.get("pointsRequired");
            int totalPointsRequired = pointsRequired * quantity;
            
            // ?¨Ïö©???¨Ïù∏???ïÏù∏
            var user = userService.getUserById(userId);
            if (user.getPointsTotal() < totalPointsRequired) {
                return ResponseEntity.badRequest()
                    .body(Map.of("success", false, "message", "?¨Ïù∏?∏Í? Î∂ÄÏ°±Ìï©?àÎã§."));
            }
            
            // ?¨Ïù∏??Ï∞®Í∞ê
            int pointsToDeduct = -totalPointsRequired;
            pointHistoryService.createPointHistory(userId, "PRODUCT_PURCHASE", pointsToDeduct, 
                product.get("name") + " Íµ¨Îß§ (" + quantity + "Í∞?");
            
            // ?¨Ïö©??Ï¥??¨Ïù∏???ÖÎç∞?¥Ìä∏
            userService.updateUserPoints(userId, pointsToDeduct);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "?ÅÌíà Íµ¨Îß§Í∞Ä ?ÑÎ£å?òÏóà?µÎãà??",
                "data", Map.of(
                    "orderId", System.currentTimeMillis(), // ?ÑÏãú Ï£ºÎ¨∏ ID
                    "productName", product.get("name"),
                    "quantity", quantity,
                    "pointsSpent", totalPointsRequired,
                    "remainingPoints", user.getPointsTotal() + pointsToDeduct
                )
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("success", false, "message", "Ï£ºÎ¨∏ ?ùÏÑ± ?§Ìå®: " + e.getMessage()));
        }
    }

    // ?¥Î?ÏßÄ Ï°∞Ìöå API
    @GetMapping("/images/{imageId}")
    public ResponseEntity<?> getImage(@PathVariable Long imageId) {
        try {
            var image = imageRepository.findById(imageId);
            if (image.isPresent()) {
                Image img = image.get();
                Map<String, Object> imageInfo = new HashMap<>();
                imageInfo.put("id", img.getId());
                imageInfo.put("filename", img.getFileName());
                imageInfo.put("contentType", img.getContentType());
                imageInfo.put("size", img.getFileSize());
                imageInfo.put("url", "/api/points/images/" + img.getId());
                return ResponseEntity.ok(imageInfo);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            log.error("?¥Î?ÏßÄ Ï°∞Ìöå ?§Ìå®: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("?¥Î?ÏßÄ Ï°∞Ìöå???§Ìå®?àÏäµ?àÎã§: " + e.getMessage());
        }
    }

    // ?§Ï†ú ?¥Î?ÏßÄ ?åÏùº ?úÍ≥µ
    @GetMapping("/images/file/{imageId}")
    public ResponseEntity<byte[]> getImageFile(@PathVariable Long imageId) {
        try {
            var image = imageRepository.findById(imageId);
            if (image.isPresent()) {
                Image img = image.get();
                
                // ?Ä?•Îêú ?¥Î?ÏßÄ ?∞Ïù¥?∞Í? ?àÎäîÏßÄ ?ïÏù∏
                if (img.getImageData() != null && img.getImageData().length > 0) {
                    log.info("?¥Î?ÏßÄ ?åÏùº ?úÍ≥µ: ID={}, ?¨Í∏∞={} bytes", imageId, img.getImageData().length);
                    return ResponseEntity.ok()
                        .contentType(MediaType.parseMediaType(img.getContentType()))
                        .body(img.getImageData());
                } else {
                    log.warn("?¥Î?ÏßÄ ?∞Ïù¥?∞Í? ?ÜÏùå: ID={}", imageId);
                    return ResponseEntity.notFound().build();
                }
            } else {
                log.warn("?¥Î?ÏßÄÎ•?Ï∞æÏùÑ ???ÜÏùå: ID={}", imageId);
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            log.error("?¥Î?ÏßÄ ?åÏùº ?úÍ≥µ ?§Ìå®: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}
